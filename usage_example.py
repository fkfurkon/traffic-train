"""
Simple Usage Example
‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢

‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô API
"""

from datetime import datetime, timedelta
import pandas as pd
import numpy as np

def simple_traffic_prediction():
    """
    ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏Å‡∏≤‡∏£‡∏à‡∏£‡∏≤‡∏à‡∏£‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢
    """
    
    print("üöó ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏Å‡∏≤‡∏£‡∏à‡∏£‡∏≤‡∏à‡∏£‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏á‡πà‡∏≤‡∏¢")
    print("=" * 50)
    
    try:
        # ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå
        from model_deployment_guide import create_prediction_pipeline
        predict_func = create_prediction_pipeline()
        
        # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
        current_time = datetime.now()
        current_vehicle_count = 45
        
        # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á (‡∏™‡∏°‡∏°‡∏ï‡∏¥)
        historical_data = [
            40, 42, 38, 44, 46, 43, 41, 45, 47, 44,
            42, 40, 43, 45, 44, 46, 48, 45, 43, 41,
            44, 46, 45, 47, 43, 45  # 26 ‡∏à‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        ]
        
        print(f"üìÖ ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {current_time.strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"üöô ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏ñ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {current_vehicle_count}")
        print(f"üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á: {len(historical_data)} ‡∏à‡∏∏‡∏î")
        
        # ‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå
        result = predict_func(current_time, current_vehicle_count, historical_data)
        
        if 'error' in result:
            print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {result['error']}")
            return
            
        # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        print(f"\nüîÆ ‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {(current_time + timedelta(hours=1)).strftime('%H:%M:%S')}:")
        print(f"üìà ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏ñ‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå: {result['ensemble_prediction']:.1f} ‡∏Ñ‡∏±‡∏ô")
        
        print(f"\nüìã ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏à‡∏≤‡∏Å‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÇ‡∏°‡πÄ‡∏î‡∏•:")
        for model_name, prediction in result['individual_predictions'].items():
            print(f"   ‚Ä¢ {model_name}: {prediction:.1f} ‡∏Ñ‡∏±‡∏ô")
            
        # ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
        prediction_value = result['ensemble_prediction']
        if prediction_value > current_vehicle_count * 1.2:
            status = "üî¥ ‡∏Å‡∏≤‡∏£‡∏à‡∏£‡∏≤‡∏à‡∏£‡∏à‡∏∞‡πÅ‡∏≠‡∏≠‡∏±‡∏î‡∏Ç‡∏∂‡πâ‡∏ô"
            advice = "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ô‡∏µ‡πâ"
        elif prediction_value < current_vehicle_count * 0.8:
            status = "üü¢ ‡∏Å‡∏≤‡∏£‡∏à‡∏£‡∏≤‡∏à‡∏£‡∏à‡∏∞‡πÇ‡∏•‡πà‡∏á‡∏Ç‡∏∂‡πâ‡∏ô"
            advice = "‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á"
        else:
            status = "üü° ‡∏Å‡∏≤‡∏£‡∏à‡∏£‡∏≤‡∏à‡∏£‡∏Ñ‡∏á‡∏ó‡∏µ‡πà"
            advice = "‡∏™‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡∏à‡∏£‡∏≤‡∏à‡∏£‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏°‡∏≤‡∏Å"
            
        print(f"\n{status}")
        print(f"üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: {advice}")
        
    except ImportError:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô")
        print("üí° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏ù‡∏∂‡∏Å‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏•‡πâ‡∏ß")
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")

def batch_prediction_example():
    """
    ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏´‡∏•‡∏≤‡∏¢‡∏à‡∏∏‡∏î‡πÄ‡∏ß‡∏•‡∏≤
    """
    
    print("\nüîÑ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏´‡∏•‡∏≤‡∏¢‡∏à‡∏∏‡∏î‡πÄ‡∏ß‡∏•‡∏≤")
    print("=" * 50)
    
    try:
        from model_deployment_guide import create_prediction_pipeline
        predict_func = create_prediction_pipeline()
        
        # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏à‡∏∏‡∏î‡πÄ‡∏ß‡∏•‡∏≤
        base_time = datetime.now()
        test_data = [
            {"time": base_time, "count": 45, "historical": [40, 42, 44, 43, 45] * 5},
            {"time": base_time + timedelta(hours=1), "count": 48, "historical": [42, 44, 46, 45, 48] * 5},
            {"time": base_time + timedelta(hours=2), "count": 52, "historical": [44, 46, 48, 50, 52] * 5},
            {"time": base_time + timedelta(hours=3), "count": 38, "historical": [42, 40, 38, 36, 38] * 5},
        ]
        
        results = []
        
        print("‚è±Ô∏è  ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå...")
        for i, data in enumerate(test_data):
            result = predict_func(data["time"], data["count"], data["historical"])
            
            if 'error' not in result:
                results.append({
                    "time": data["time"].strftime("%H:%M"),
                    "current": data["count"],
                    "predicted": result['ensemble_prediction'],
                    "change": result['ensemble_prediction'] - data["count"]
                })
            
        # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        print(f"\nüìä ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå:")
        print(f"{'‡πÄ‡∏ß‡∏•‡∏≤':>6} | {'‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô':>8} | {'‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå':>8} | {'‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á':>10} | {'‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°':>8}")
        print("-" * 50)
        
        for result in results:
            trend = "üìà" if result["change"] > 5 else "üìâ" if result["change"] < -5 else "‚û°Ô∏è"
            print(f"{result['time']:>6} | {result['current']:>8.0f} | {result['predicted']:>8.1f} | {result['change']:>+10.1f} | {trend:>8}")
            
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")

def load_and_analyze_dataset():
    """
    ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å dataset
    """
    
    print("\nüìà ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å dataset ‡∏à‡∏£‡∏¥‡∏á")
    print("=" * 50)
    
    try:
        # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        df = pd.read_csv('traffic_dataset1.csv')
        df['timestamp'] = pd.to_datetime(df['timestamp'], format='%d/%m/%Y %H:%M')
        
        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô
        print(f"üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {len(df):,} ‡∏à‡∏∏‡∏î")
        print(f"‚è∞ ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤: {df['timestamp'].min()} ‡∏ñ‡∏∂‡∏á {df['timestamp'].max()}")
        print(f"üöó ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏ñ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: {df['vehicle_count'].mean():.1f} ‡∏Ñ‡∏±‡∏ô")
        print(f"üìà ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏ñ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î: {df['vehicle_count'].max()} ‡∏Ñ‡∏±‡∏ô")
        print(f"üìâ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏ñ‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î: {df['vehicle_count'].min()} ‡∏Ñ‡∏±‡∏ô")
        
        # ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤
        df['hour'] = df['timestamp'].dt.hour
        hourly_avg = df.groupby('hour')['vehicle_count'].mean()
        
        print(f"\n‚è∞ ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏£‡∏≤‡∏à‡∏£‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î:")
        top_hours = hourly_avg.nlargest(3)
        for hour, count in top_hours.items():
            print(f"   üïí {hour:02d}:00 - ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ {count:.1f} ‡∏Ñ‡∏±‡∏ô")
            
        print(f"\n‚è∞ ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏£‡∏≤‡∏à‡∏£‡∏ô‡πâ‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î:")
        low_hours = hourly_avg.nsmallest(3)
        for hour, count in low_hours.items():
            print(f"   üïí {hour:02d}:00 - ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ {count:.1f} ‡∏Ñ‡∏±‡∏ô")
            
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á
        from model_deployment_guide import create_prediction_pipeline
        predict_func = create_prediction_pipeline()
        
        # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á 5 ‡∏à‡∏∏‡∏î‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
        sample_data = df.tail(30)  # ‡πÄ‡∏≠‡∏≤ 30 ‡∏à‡∏∏‡∏î‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
        
        print(f"\nüîÆ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á (5 ‡∏à‡∏∏‡∏î‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢):")
        
        for i in range(5):
            idx = -(5-i)  # ‡∏ô‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡∏ó‡πâ‡∏≤‡∏¢
            row = sample_data.iloc[idx]
            historical = sample_data['vehicle_count'].iloc[max(0, idx-24):idx].tolist()
            
            if len(historical) >= 5:  # ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏≠
                result = predict_func(
                    row['timestamp'], 
                    row['vehicle_count'], 
                    historical
                )
                
                if 'error' not in result:
                    actual = row['target_next_1h'] if 'target_next_1h' in row else "N/A"
                    predicted = result['ensemble_prediction']
                    
                    print(f"   üìÖ {row['timestamp'].strftime('%m/%d %H:%M')}: "
                          f"‡∏à‡∏£‡∏¥‡∏á={row['vehicle_count']:.0f}, "
                          f"‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå={predicted:.1f}"
                          f"{f', ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢={actual:.0f}' if actual != 'N/A' else ''}")
                    
    except FileNotFoundError:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå traffic_dataset1.csv")
        print("üí° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô")
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")

if __name__ == "__main__":
    
    print("üöó Traffic Forecasting - Usage Examples")
    print("‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏Å‡∏≤‡∏£‡∏à‡∏£‡∏≤‡∏à‡∏£")
    print("=" * 60)
    
    # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà 1: ‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏á‡πà‡∏≤‡∏¢
    simple_traffic_prediction()
    
    # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà 2: ‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏´‡∏•‡∏≤‡∏¢‡∏à‡∏∏‡∏î‡πÄ‡∏ß‡∏•‡∏≤
    batch_prediction_example()
    
    # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà 3: ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á
    load_and_analyze_dataset()
    
    print(f"\nüéØ ‡∏™‡∏£‡∏∏‡∏õ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:")
    print("1. üîß ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á: ‡∏£‡∏±‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ")
    print("2. üåê ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API: ‡∏£‡∏±‡∏ô python traffic_api.py")
    print("3. üî¨ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤: ‡πÉ‡∏ä‡πâ model_deployment_guide.py")
    print("4. üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•: ‡πÉ‡∏ä‡πâ save_models.py")
    
    print(f"\nüìö ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á:")
    import os
    for file in ['traffic_dataset1.csv', 'traffic_forecasting_comparison.ipynb', 
                 'model_deployment_guide.py', 'traffic_api.py', 'save_models.py']:
        status = "‚úÖ" if os.path.exists(file) else "‚ùå"
        print(f"   {status} {file}")
        
    if os.path.exists('./models/'):
        print(f"\nüìÅ ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ:")
        for file in os.listdir('./models/'):
            print(f"   ‚úÖ {file}")
    else:
        print(f"\n‚ö†Ô∏è  ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ")
        print("üí° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÉ‡∏ô‡πÇ‡∏ô‡πâ‡∏ï‡∏ö‡∏∏‡πä‡∏Å‡∏Å‡πà‡∏≠‡∏ô")
